{"version":3,"sources":["Card.js","List.js","App.js","serviceWorker.js","store.js","index.js"],"names":["Card","props","className","type","title","content","List","cards","map","card","key","id","header","App","store","this","STORE","lists","listItem","cardIds","allCards","React","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAgBeA,MAbf,SAAcC,GAEZ,OACE,yBAAKC,UAAU,QACb,4BAAQC,KAAK,UAAb,UACA,4BACGF,EAAMG,OAET,2BAAIH,EAAMI,WCcDC,MArBf,SAAcL,GACZ,IAAMM,EAAQN,EAAMM,MAAMC,KAAI,SAACC,GAAD,OAC5B,kBAAC,EAAD,CACEC,IAAOD,EAAKE,GACZP,MAASK,EAAKL,MACdC,QAAWI,EAAKJ,aAIpB,OACE,6BAASH,UAAU,QACf,4BAAQA,UAAU,eAChB,4BAAKD,EAAMW,SAEb,yBAAKV,UAAU,cACZK,KCdLM,E,uKAIF,IAAMC,EAAQC,KAAKd,MAAMa,MAAME,MACzBC,EAAQH,EAAMG,MAAMT,KAAI,SAAAU,GAAQ,OACpC,kBAAC,EAAD,CACER,IAAOQ,EAASP,GAChBC,OAAUM,EAASN,OACnBL,MAASW,EAASC,QAAQX,KAAI,SAAAG,GAAE,OAAIG,EAAMM,SAAST,WAGvD,OACE,0BAAMT,UAAU,OACd,4BAAQA,UAAU,cAChB,yCACA,yBAAKA,UAAU,YACZe,S,GAjBKI,IAAMC,WAAlBT,EAuBGU,aAAe,CACpBT,MAAO,CACLG,MAAO,GACPG,SAAU,KAKDP,QCxBKW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAyCe,GACbZ,MA1CY,CACZC,MAAO,CACL,CACEN,GAAI,IACJC,OAAQ,aACRO,QAAS,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEhD,CACER,GAAI,IACJC,OAAQ,cACRO,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAE1C,CACER,GAAI,IACJC,OAAQ,aACRO,QAAS,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEzE,CACER,GAAI,IACJC,OAAQ,cACRO,QAAS,CAAE,IAAK,OAGpBC,SAAU,CACR,EAAK,CAAET,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,cAAeC,QAAS,eAC/C,EAAK,CAAEM,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,cAAeC,QAAS,eAC/C,EAAK,CAAEM,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,eAAgBC,QAAS,eAChD,EAAK,CAAEM,GAAI,IAAKP,MAAO,cAAeC,QAAS,eAC/C,EAAK,CAAEM,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,aAAcC,QAAS,eAC9C,EAAK,CAAEM,GAAI,IAAKP,MAAO,gBAAiBC,QAAS,eACjD,EAAK,CAAEM,GAAI,IAAKP,MAAO,eAAgBC,QAAS,eAChD,EAAK,CAAEM,GAAI,IAAKP,MAAO,kBAAmBC,QAAS,kBC7BvDwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKjB,MAAOE,KAEdgB,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8ac68de.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card(props) {\r\n  \r\n  return (\r\n    <div className='Card'>\r\n      <button type='button'>delete</button>\r\n      <h3>\r\n        {props.title}\r\n      </h3>\r\n      <p>{props.content}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './List.css';\r\nimport Card from './Card'\r\n\r\nfunction List(props) {\r\n  const cards = props.cards.map((card) => (\r\n    <Card \r\n      key = {card.id}\r\n      title = {card.title}\r\n      content = {card.content}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <section className=\"List\">\r\n        <header className=\"List-header\">\r\n          <h2>{props.header}</h2>\r\n        </header>\r\n        <div className=\"List-cards\">\r\n          {cards}\r\n        </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport './App.css';\r\nimport List from './List'\r\n\r\n\r\nclass App extends React.Component {\r\n  \r\n\r\n  render() {\r\n    const store = this.props.store.STORE\r\n    const lists = store.lists.map(listItem => (\r\n      <List \r\n        key = {listItem.id}\r\n        header = {listItem.header}\r\n        cards = {listItem.cardIds.map(id => store.allCards[id])}\r\n      />\r\n    ))\r\n    return (\r\n      <main className='App'>\r\n        <header className='App-header'>\r\n          <h1>Trelloyes</h1>\r\n          <div className='App-list'>\r\n            {lists}\r\n          </div>\r\n        </header>\r\n      </main>\r\n    )\r\n  }\r\n  static defaultProps = {\r\n    store: {\r\n      lists: [],\r\n      allCards: {},\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const STORE = {\r\n  lists: [\r\n    {\r\n      id: '1',\r\n      header: 'First list',\r\n      cardIds: [ 'a', 'b', 'e', 'f', 'g', 'j', 'l', 'm' ],\r\n    },\r\n    {\r\n      id: '2',\r\n      header: 'Second list',\r\n      cardIds: ['b', 'c', 'd', 'f', 'h', 'i', 'k'],\r\n    },\r\n    {\r\n      id: '3',\r\n      header: 'Third list',\r\n      cardIds: [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm' ],\r\n    },\r\n    {\r\n      id: '4',\r\n      header: 'Fourth list',\r\n      cardIds: [ 'l', 'm' ],\r\n    },\r\n  ],\r\n  allCards: {\r\n    'a': { id: 'a', title: 'First card', content: 'lorem ipsum' },\r\n    'b': { id: 'b', title: 'Second card', content: 'lorem ipsum' },\r\n    'c': { id: 'c', title: 'Third card', content: 'lorem ipsum' },\r\n    'd': { id: 'd', title: 'Fourth card', content: 'lorem ipsum' },\r\n    'e': { id: 'e', title: 'Fifth card', content: 'lorem ipsum' },\r\n    'f': { id: 'f', title: 'Sixth card', content: 'lorem ipsum' },\r\n    'g': { id: 'g', title: 'Seventh card', content: 'lorem ipsum' },\r\n    'h': { id: 'h', title: 'Eighth card', content: 'lorem ipsum' },\r\n    'i': { id: 'i', title: 'Ninth card', content: 'lorem ipsum' },\r\n    'j': { id: 'j', title: 'Tenth card', content: 'lorem ipsum' },\r\n    'k': { id: 'k', title: 'Eleventh card', content: 'lorem ipsum' },\r\n    'l': { id: 'l', title: 'Twelfth card', content: 'lorem ipsum' },\r\n    'm': { id: 'm', title: 'Thirteenth card', content: 'lorem ipsum' },\r\n  },\r\n}\r\n\r\n\r\nexport default {\r\n  STORE\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport STORE from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={STORE} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}